GNU Emacs NEWS -- history of user-visible changes.

Copyright (C) 2022-2023 Free Software Foundation, Inc.
See the end of the file for license conditions.

Please send Emacs bug reports to 'bug-gnu-emacs@gnu.org'.
If possible, use 'M-x report-emacs-bug'.

This file is about changes in Emacs version 30.

See file HISTORY for a list of GNU Emacs versions and release dates.
See files NEWS.29, NEWS.28, ..., NEWS.18, and NEWS.1-17 for changes
in older Emacs versions.

You can narrow news to a specific version by calling 'view-emacs-news'
with a prefix argument or by typing 'C-u C-h C-n'.

Temporary note:
+++ indicates that all relevant manuals in doc/ have been updated.
--- means no change in the manuals is needed.
When you add a new item, use the appropriate mark if you are sure it
applies, and please also update docstrings as needed.


* Installation Changes in Emacs 29.2


* Installation Changes in Emacs 30.1

** Emacs has been ported to the Android operating system.
This requires Emacs to be compiled on another computer.  The Android
NDK, SDK, and a suitable Java compiler must also be installed.

See the file 'java/INSTALL' for more details.

---
** Emacs now defaults to ossaudio library for sound on NetBSD and OpenBSD.
Previously configure used ALSA libraries if installed on the
system when configured '--with-sound=yes' (which is the default), with
fallback to libossaudio.  The libossaudio library included with the
base system is now used even if ALSA is found to avoid relying on
external packages and to resolve potential incompatibilities between
Linux and BSD versions of ALSA.  Use '--with-sound=alsa' to build with
ALSA on these operating systems instead.


* Startup Changes in Emacs 30.1


*** New user option 'tramp-show-ad-hoc-proxies'.
When non-nil, ad-hoc definitions are kept in remote file names instead
of showing the shortcuts.


* New Modes and Packages in Emacs 29.2


* Incompatible Lisp Changes in Emacs 29.2


* Lisp Changes in Emacs 29.2


* Changes in Emacs 29.2 on Non-Free Operating Systems


* Installation Changes in Emacs 29.1

** Ahead-of-time native compilation can now be requested via configure.
Use '--with-native-compilation=aot' to request that all the Lisp files
in the Emacs tree should be natively compiled ahead of time.  (This is
slow on most machines.)

This feature existed in Emacs 28.1, but was less easy to request.

** Emacs can be built with the tree-sitter parsing library.
This library, together with separate grammar libraries for each
language, provides incremental parsing capabilities for several
popular programming languages and other formatted files.  Emacs built
with this library offers major modes, described elsewhere in this
file, that are based on the tree-sitter's parsers.  If you have the
tree-sitter library installed, the configure script will automatically
include it in the build; use '--without-tree-sitter' at configure time
to disable that.

Emacs modes based on the tree-sitter library require an additional
grammar library for each mode.  These grammar libraries provide the
tree-sitter library with language-specific lexical analysis and
parsing capabilities, and are developed separately from the
tree-sitter library itself.  If you don't have a grammar library
required by some Emacs major mode, and your distro doesn't provide it
as an installable package, you can compile and install such a library
yourself.  Many libraries can be downloaded from the tree-sitter site:

    https://github.com/tree-sitter

Emacs provides a user command, 'treesit-install-language-grammar',
that automates the download and build process of a grammar library.
It prompts for the language, the URL of the language grammar's VCS
repository, and then uses the installed C/C++ compiler to build the
library and install it.

You can also do this manually.  To compile such a library after
cloning its Git repository, compile the files "scanner.c" and
"parser.c" (sometimes named "scanner.cc" and "parser.cc") in the "src"
subdirectory of the library's source tree using the C or C++ compiler,
then link these two files into a shared library named
"libtree-sitter-LANG.so" ("libtree-sitter-LANG.dll" on MS-Windows,
"libtree-sitter-LANG.dylib" on macOS), where LANG is the name of the
language supported by the grammar as it is expected by the Emacs major
mode (for example, "c" for 'c-ts-mode', "cpp" for 'c++-ts-mode',
"python" for 'python-ts-mode', etc.).  Then place the shared library
you've built in the same directory where you keep the other shared
libraries used by Emacs, or in the "tree-sitter" subdirectory of your
'user-emacs-directory', or in a directory mentioned in the variable
'treesit-extra-load-path'.

You only need to install language grammar libraries required by the
Emacs modes you will use, as Emacs loads these libraries only when the
corresponding mode is turned on in some buffer for the first time in
an Emacs session.

We generally recommend to use the latest versions of grammar libraries
available from their sites, as these libraries are in constant
development and occasionally add features and fix important bugs to
follow the advances in the programming languages they support.

** Emacs can be built with built-in support for accessing SQLite databases.
This uses the popular sqlite3 library, and can be disabled by using
the '--without-sqlite3' option to the 'configure' script.

** Support for the WebP image format.
This support is built by default when the libwebp library is
available, and includes support for animated WebP images.  To disable
WebP support, use the '--without-webp' configure flag.  Image
specifiers can now use ':type webp'.

** Emacs now installs the ".pdmp" file using a unique fingerprint in the name.
The file is typically installed using a file name akin to
"...dir/libexec/emacs/29.1/x86_64-pc-linux-gnu/emacs-<fingerprint>.pdmp".
If a constant file name is required, the file can be renamed to
"emacs.pdmp", and Emacs will find it during startup anyway.

** Emacs on X now uses XInput 2 for input events.
If your X server has support and you have the XInput 2 development
headers installed, Emacs will use the X Input Extension for handling
input.  If this causes problems, you can configure Emacs with the
option '--without-xinput2' to disable this support.

'(featurep 'xinput2)' can be used to test for the presence of XInput 2
support from Lisp programs.

** Emacs can now be optionally built with the Cairo XCB backend.
Configure Emacs with the '--with-cairo-xcb' option to use the Cairo
XCB backend; the default is not to use it.  This backend makes Emacs
moderately faster when running over X connections with high latency,
but is currently known to crash when Emacs repeatedly closes and opens
a display connection to the same terminal; this could happen, for
example, if you repeatedly visit files via emacsclient in a single
client frame, each time deleting the frame with 'C-x C-c'.

** Emacs now supports being built with pure GTK.
To use this option, make sure the GTK 3 (version 3.22.23 or later) and
Cairo development files are installed, and configure Emacs with the
option '--with-pgtk'.  Unlike the default X and GTK build, the
resulting Emacs binary will work on any underlying window system
supported by GDK, such as Wayland and Broadway.  We recommend that you
use this configuration only if you are running a window system other
than X that's supported by GDK.  Running this configuration on X is
known to have problems, such as undesirable frame positioning and
various issues with keyboard input of sequences such as 'C-;' and
'C-S-u'.  Running this on WSL is also known to have problems.

Note that, unlike the X build of Emacs, the PGTK build cannot
automatically switch to text-mode interface (thus emulating '-nw') if
it cannot determine the default display; it will instead complain and
ask you to invoke it with the explicit '-nw' option.

** Emacs has been ported to the Haiku operating system.
The configuration process should automatically detect and build for
Haiku.  There is also an optional window-system port to Haiku, which
can be enabled by configuring Emacs with the option '--with-be-app',
which will require the Haiku Application Kit development headers and a
C++ compiler to be present on your system.  If Emacs is not built with
the option '--with-be-app', the resulting Emacs will only run in
text-mode terminals.

To enable Cairo support, ensure that the Cairo and FreeType
development files are present on your system, and configure Emacs with
'--with-be-cairo'.

Unlike X, there is no compile-time option to enable or disable
double-buffering; it is always enabled.  To disable it, change the
frame parameter 'inhibit-double-buffering' instead.

** Emacs no longer reduces the size of the Japanese dictionary.
Building Emacs includes generation of a Japanese dictionary, which is
used by Japanese input methods.  Previously, the build included a step
of reducing the size of this dictionary's vocabulary.  This vocabulary
reduction is now optional, by default off.  If you need the Emacs
build to include the vocabulary reduction, configure Emacs with the
option '--with-small-ja-dic'.  In an Emacs source tree already
configured without that option, you can force the vocabulary reduction
by saying

    make -C leim generate-ja-dic JA_DIC_NO_REDUCTION_OPTION=''

after deleting "lisp/leim/ja-dic/ja-dic.el".

** The docstrings of preloaded files are not in "etc/DOC" any more.
Instead, they're fetched as needed from the corresponding ".elc"
files, as was already the case for all the non-preloaded files.


* Startup Changes in Emacs 29.1

** '--batch' and '--script' now adjust the garbage collection levels.
These switches now set 'gc-cons-percentage' to 1.0 (up from the
default of 0.1).  This means that batch processes will typically use
more memory than before, but use less time doing garbage collection.
Batch jobs that are supposed to run for a long time should adjust the
limit back down again.

** Emacs can now be used more easily in an executable script.
If you start an executable script with

    #!/usr/bin/emacs -x

Emacs will start without reading any init files (like with '--quick'),
and then execute the rest of the script file as Emacs Lisp.  When it
reaches the end of the script, Emacs will exit with an exit code from
the value of the final form.

** Emacs now supports setting 'user-emacs-directory' via '--init-directory'.
Use the '--init-directory' command-line option to set
'user-emacs-directory'.

** Emacs now has a '--fingerprint' option.
This will output a string identifying the current Emacs build, and exit.

** New hook 'after-pdump-load-hook'.
This is run at the end of the Emacs startup process, and is meant to
be used to reinitialize data structures that would normally be done at
load time.

** Native Compilation

*** New command 'native-compile-prune-cache'.
This command deletes old subdirectories of the eln cache (but not the
ones for the current Emacs version).  Note that subdirectories of the
system directory where the "*.eln" files are installed (usually, the
last entry in 'native-comp-eln-load-path') are not deleted.

*** New function 'startup-redirect-eln-cache'.
This function can be called in your init files to change the
user-specific directory where Emacs stores the "*.eln" files produced
by native compilation of Lisp packages Emacs loads.  The default
eln cache directory is unchanged: it is the "eln-cache" subdirectory
of 'user-emacs-directory'.


* Incompatible changes in Emacs 29.1

** The image commands have changed key bindings.
In previous Emacs versions, the '+', '-' and 'r' keys were bound when
point was over an image.  In Emacs 29.1, additional commands have been
added, and this made it more likely that users would trigger the image
commands by mistake.  To avoid this, all image commands have been
moved to the 'i' prefix keymap, so '+' is now 'i +', '-' is now 'i -',
and 'r' is now 'i r'.  In addition, these commands are now repeating,
so you can rotate an image twice by saying 'i r r', for instance.

** Emacs now picks the correct coding-system for X input methods.
Previously, Emacs would use 'locale-coding-system' for input
methods, which could in some circumstances be incorrect, especially
when the input method chose to fall back to some other coding system.

Emacs now automatically detects the coding-system used by input
methods, and uses that to decode input in preference to the value of
'locale-coding-system'.  This unfortunately means that users who have
changed the coding system used to decode X keyboard input must adjust
their customizations to 'locale-coding-system' to the variable
'x-input-coding-system' instead.

** Bookmarks no longer include context for encrypted files.
If you're visiting an encrypted file, setting a bookmark no longer
includes excerpts from that buffer in the bookmarks file.  This is
implemented by the new hook 'bookmark-inhibit-context-functions',
where packages can register a function which returns non-nil for file
names to be excluded from adding such excerpts.

** 'show-paren-mode' is now disabled in 'special-mode' buffers.
In Emacs versions previous to Emacs 28.1, 'show-paren-mode' defaulted
off.  In Emacs 28.1, the mode was switched on in all buffers.  In
Emacs 29.1, this was changed to be switched on in all editing-related
buffers, but not in buffers that inherit from 'special-mode'.  To go
back to how things worked in Emacs 28.1, put the following in your
init file:

    (setopt show-paren-predicate t)

** Explicitly-set read-only state is preserved when reverting a buffer.
If you use the 'C-x C-q' command to change the read-only state of the
buffer and then revert it, Emacs would previously use the file
permission bits to determine whether the buffer should be read-only
after reverting the buffer.  Emacs now remembers the decision made in
'C-x C-q'.

** The Gtk selection face is no longer used for the region.
The combination of a Gtk-controlled background and a foreground color
controlled by the internal Emacs machinery led to low-contrast faces
in common default setups.  Emacs now uses the same 'region' face on
Gtk and non-Gtk setups.

** 'C-h f' and 'C-h x' may now require confirmation when you press 'RET'.
If the text in the minibuffer cannot be completed to a single function
or command, typing 'RET' will not automatically complete to the shortest
candidate, but will instead ask for confirmation.  Typing 'TAB' will
complete as much as possible, and another 'TAB' will show all the
possible completions.  This allows you to insist on the functions name
even if Help doesn't appear to know about it, by confirming with a
second 'RET'.

** Dired

*** 'w' ('dired-copy-filename-as-kill') has changed behavior.
If there are several files marked, file names containing space and
quote characters will be quoted "like this".

*** The 'd' command now more consistently skips dot files.
In previous Emacs versions, commands like 'C-u 10 d' would put the "D"
mark on the next ten files, no matter whether they were dot files
(i.e., "." and "..") or not, while marking the next ten lines with the
mouse (in 'transient-mark-mode') and then hitting 'd' would skip dot
files.  These now work equivalently.

** Warning about "eager macro-expansion failure" is now an error.

** Previously, the X "reverseVideo" value at startup was heeded for all frames.
This meant that if you had a "reverseVideo" resource on the initial
display, and then opened up a new frame on a display without any
explicit "reverseVideo" setting, it would get heeded there, too.  (This
included terminal frames.)  In Emacs 29, the "reverseVideo" X resource
is handled like all the other X resources, and set on a per-frame basis.

** 'E' in 'query-replace' now edits the replacement with exact case.
Previously, this command did the same as 'e'.

** '/ a' in "*Packages*" buffer now limits by archive name(s) instead of regexp.

** Setting the goal columns now also affects '<prior>' and '<next>'.
Previously, 'C-x C-n' only affected 'next-line' and 'previous-line',
but it now also affects 'scroll-up-command' and 'scroll-down-command'.

** Isearch in "*Help*" and "*info*" now char-folds quote characters by default.
This means that you can say 'C-s `foo' (GRAVE ACCENT) if the buffer
contains "‘foo" (LEFT SINGLE QUOTATION MARK) and the like.  These
quotation characters look somewhat similar in some fonts.  To switch
this off, disable the new 'isearch-fold-quotes-mode' minor mode.

** Sorting commands no longer necessarily change modification status.
In earlier Emacs versions, commands like 'sort-lines' would always
change buffer modification status to "modified", whether they changed
something in the buffer or not.  This has been changed: the buffer is
marked as modified only if the sorting ended up actually changing the
contents of the buffer.

** 'string-lines' handles trailing newlines differently.
It no longer returns an empty final string if the string ends with a
newline.

** 'TAB' and '<backtab>' are now bound in 'button-map'.
This means that if point is on a button, 'TAB' will take you to the
next button, even if the mode has bound it to something else.  This
also means that 'TAB' on a button in an 'outline-minor-mode' heading
will move point instead of collapsing the outline.

** 'outline-minor-mode-cycle-map' is now parent of 'outline-minor-mode'.
Instead of adding text property 'keymap' with 'outline-minor-mode-cycle'
on outline headings in 'outline-minor-mode', the keymap
'outline-minor-mode-cycle' is now active in the whole buffer.
But keybindings in 'outline-minor-mode-cycle' still take effect
only on outline headings because they are bound with the help of
'outline-minor-mode-cycle--bind' that checks if point is on a heading.

** 'Info-default-directory-list' is no longer populated at Emacs startup.
If you have code in your init file that removes directories from
'Info-default-directory-list', this will no longer work.

** 'C-k' no longer deletes files in 'ido-mode'.
To get the previous action back, put something like the following in
your Init file:

    (require 'ido)
    (keymap-set ido-file-completion-map "C-k" #'ido-delete-file-at-head)

** New user option 'term-clear-full-screen-programs'.
By default, term.el will now work like most terminals when displaying
full-screen programs: When they exit, the output is cleared, leaving
what was displayed in the window before the programs started.  Set
this user option to nil to revert back to the old behavior.

** Support for old EIEIO functions is not autoloaded any more.
You need an explicit '(require 'eieio-compat)' to use 'defmethod'
and 'defgeneric' (which were made obsolete in Emacs 25.1 by
'cl-defmethod' and 'cl-defgeneric').
Similarly you might need to '(require 'eieio-compat)' before loading
files that were compiled with an old EIEIO (Emacs<25).

** 'C-x 8 .' has been moved to 'C-x 8 . .'.
This is to open up the 'C-x 8 .' map to bind further characters there.

** 'C-x 8 =' has been moved to 'C-x 8 = ='.
You can now use 'C-x 8 =' to insert several characters with macron;
for example, 'C-x 8 = a' will insert U+0101 LATIN SMALL LETTER A WITH
MACRON.  To insert a lone macron, type 'C-x 8 = =' instead of the
previous 'C-x ='.

** Eshell

*** Eshell's PATH is now derived from 'exec-path'.
For consistency with remote connections, Eshell now uses 'exec-path'
to determine the execution path on the local or remote system, instead
of using the PATH environment variable directly.

*** 'source' and '.' no longer accept the '--help' option.
This is for compatibility with the shell versions of these commands,
which don't handle options like '--help' in any special way.

*** String delimiters in argument predicates/modifiers are more restricted.
Previously, some argument predicates/modifiers allowed arbitrary
characters as string delimiters.  To provide more unified behavior
across all predicates/modifiers, the list of allowed delimiters has
been restricted to "...", '...', /.../, |...|, (...), [...], <...>,
and {...}.  See the "(eshell) Argument Predication and Modification"
node in the Eshell manual for more details.

*** Eshell pipelines now only pipe stdout by default.
To pipe both stdout and stderr, use the '|&' operator instead of '|'.

** The 'delete-forward-char' command now deletes by grapheme clusters.
This command is by default bound to the '<Delete>' function key
(a.k.a. '<deletechar>').  When invoked without a prefix argument or
with a positive prefix numeric argument, the command will now delete
complete grapheme clusters produced by character composition.  For
example, if point is before an Emoji sequence, pressing '<Delete>'
will delete the entire sequence, not just a single character at its
beginning.

** 'load-history' does not treat autoloads specially any more.
An autoload definition appears just as a '(defun . NAME)' and the
'(t . NAME)' entries are not generated any more.

** The Tamil input methods no longer insert Tamil digits.
The input methods 'tamil-itrans' and 'tamil-inscript' no longer insert
the Tamil digits, as those digit characters are not used nowadays by
speakers of the Tamil language.  To get back the previous behavior,
use the new 'tamil-itrans-digits' and 'tamil-inscript-digits' input
methods instead.

** New variable 'current-time-list' governing default timestamp form.
Functions like 'current-time' now yield '(TICKS . HZ)' timestamps if
this new variable is nil.  The variable defaults to t, which means
these functions default to timestamps of the forms '(HI LO US PS)',
'(HI LO US)' or '(HI LO)', which are less regular and less efficient.
This is part of a long-planned change first documented in Emacs 27.
Developers are encouraged to test timestamp-related code with this
variable set to nil, as it will default to nil in a future Emacs
version and will be removed some time after that.

** Functions that recreate the "*scratch*" buffer now also initialize it.
When functions like 'other-buffer' and 'server-execute' recreate
"*scratch*", they now also insert 'initial-scratch-message' and set
the major mode according to 'initial-major-mode', like at Emacs
startup.  Previously, these functions ignored
'initial-scratch-message' and left "*scratch*" in 'fundamental-mode'.

** Naming of Image-Dired thumbnail files has changed.
Names of thumbnail files generated when 'image-dired-thumbnail-storage'
is 'image-dired' now always end in ".jpg".  This fixes various issues
on different platforms, but means that thumbnails generated in Emacs 28
will not be used in Emacs 29, and vice-versa.  If disk space is an
issue, consider deleting the 'image-dired-dir' directory (usually
"~/.emacs.d/image-dired/") after upgrading to Emacs 29.

** The 'rlogin' method in the URL library is now obsolete.
Emacs will now display a warning if you request a URL like
"rlogin://foo@example.org".

** Setting 'url-gateway-method' to 'rlogin' is now obsolete.
Emacs will now display a warning when setting it to that value.
The user options 'url-gateway-rlogin-host',
'url-gateway-rlogin-parameters', and 'url-gateway-rlogin-user-name'
are also obsolete.

** The user function 'url-irc-function' now takes a SCHEME argument.
The user option 'url-irc-function' is now called with a sixth argument
corresponding to the scheme portion of the target URL.  For example,
this would be "ircs" for a URL like "ircs://irc.libera.chat".

** The linum.el library is now obsolete.
We recommend using either the built-in 'display-line-numbers-mode', or
the 'nlinum' package from GNU ELPA instead.  The former has better
performance, but the latter is closer to a drop-in replacement.

1. To use 'display-line-numbers-mode', add something like this to your
   init file:

    (global-display-line-numbers-mode 1)
    ;; Alternatively, to use it only in programming modes:
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)

2. To use 'nlinum', add this to your Init file:

    (package-install 'nlinum)
    (global-nlinum-mode 1)
    ;; Alternatively, to use it only in programming modes:
    (add-hook 'prog-mode-hook #'nlinum-mode)

3. To continue using the obsolete package 'linum', add this line to
   your Init file, in addition to any existing customizations:

    (require 'linum)

** The thumbs.el library is now obsolete.
We recommend using the 'image-dired' command instead.

** The autoarg.el library is now marked obsolete.
This library provides the 'autoarg-mode' and 'autoarg-kp-mode' minor
modes to emulate the behavior of the historical editor Twenex Emacs.
We believe it is no longer useful.

** The quickurl.el library is now obsolete.
Use 'abbrev', 'skeleton' or 'tempo' instead.

** The rlogin.el library, and the 'rsh' command are now obsolete.
Use something like 'M-x shell RET ssh <host> RET' instead.

** The url-about.el library is now obsolete.

** The autoload.el library is now obsolete.
It is superseded by the new loaddefs-gen.el library.

** The netrc.el library is now obsolete.
Use the 'auth-source-netrc-parse-all' function in auth-source.el
instead.

** The url-dired.el library is now obsolete.

** The fast-lock.el and lazy-lock.el libraries have been removed.
They have been obsolete since Emacs 22.1.

The variable 'font-lock-support-mode' is occasionally useful for
debugging purposes.  It is now a regular variable (instead of a user
option) and can be set to nil to disable Just-in-time Lock mode.

** The 'utf-8-auto' coding-system now produces BOM on encoding.
This is actually a bugfix, since this is how 'utf-8-auto' was
documented from day one; it just didn't behave according to
documentation.  It turns out some Lisp programs were using this
coding-system on the wrong assumption that the "auto" part means some
automagic handling of the end-of-line (EOL) format conversion; those
programs will now start to fail, because BOM signature in UTF-8 encoded
text is rarely expected.  That is the reason we mention this bugfix
here.

In general, this coding-system should probably never be used for
encoding, only for decoding.


* Changes in Emacs 29.1

** New user option 'major-mode-remap-alist' to specify favorite major modes.
This user option lets you remap the default modes (e.g. 'perl-mode' or
'latex-mode') to your favorite ones (e.g. 'cperl-mode' or
'LaTeX-mode') instead of having to use 'defalias', which can have
undesirable side effects.
This applies to all modes specified via 'auto-mode-alist', file-local
variables, etc.

** Emacs now supports Unicode Standard version 15.0.

** New user option 'electric-quote-replace-consecutive'.
This allows you to disable the default behavior of consecutive single
quotes being replaced with a double quote.

** Emacs is now capable of editing files with very long lines.
The display of long lines has been optimized, and Emacs should no
longer choke when a buffer on display contains long lines.  The
variable 'long-line-threshold' controls whether and when these display
optimizations are in effect.

A companion variable 'large-hscroll-threshold' controls when another
set of display optimizations are in effect, which are aimed
specifically at speeding up display of long lines that are truncated
on display.

If you still experience slowdowns while editing files with long lines,
this may be due to line truncation, or to one of the enabled minor
modes, or to the current major mode.  Try turning off line truncation
with 'C-x x t', or try disabling all known slow minor modes with
'M-x so-long-minor-mode', or try disabling both known slow minor modes
and the major mode with 'M-x so-long-mode', or visit the file with
'M-x find-file-literally' instead of the usual 'C-x C-f'.

In buffers in which these display optimizations are in effect, the
'fontification-functions', 'pre-command-hook' and 'post-command-hook'
hooks are executed on a narrowed portion of the buffer, whose size is
controlled by the variables 'long-line-optimizations-region-size' and
'long-line-optimizations-bol-search-limit', as if they were in a
'with-restriction' form.  This may, in particular, cause occasional
mis-fontifications in these buffers.  Modes which are affected by
these optimizations and by the fact that the buffer is narrowed,
should adapt and either modify their algorithm so as not to expect the
entire buffer to be accessible, or, if accessing outside of the
narrowed region doesn't hurt performance, use the
'without-restriction' form to temporarily lift the restriction and
access portions of the buffer outside of the narrowed region.

The new function 'long-line-optimizations-p' returns non-nil when
these optimizations are in effect in the current buffer.

** New command to change the font size globally.
To increase the font size, type 'C-x C-M-+' or 'C-x C-M-='; to
decrease it, type 'C-x C-M--'; to restore the font size, type 'C-x
C-M-0'.  The final key in these commands may be repeated without the
leading 'C-x' and without the modifiers, e.g. 'C-x C-M-+ C-M-+ C-M-+'
and 'C-x C-M-+ + +' increase the font size by three steps.  When
'mouse-wheel-mode' is enabled, 'C-M-wheel-up' and 'C-M-wheel-down' also
increase and decrease the font size globally.  Additionally, the
user option 'global-text-scale-adjust-resizes-frames' controls whether
the frames are resized when the font size is changed.

** New config variable 'syntax-wholeline-max' to reduce the cost of long lines.
This variable is used by some operations (mostly syntax-propertization
and font-locking) to treat lines longer than this variable as if they
were made up of various smaller lines.  This can help reduce the
slowdowns seen in buffers made of a single long line, but can also
cause misbehavior in the presence of such long lines (though most of
that misbehavior should usually be limited to mis-highlighting).  You
can recover the previous behavior with:

    (setq syntax-wholeline-max most-positive-fixnum)

** New bindings in 'find-function-setup-keys' for 'find-library'.
When 'find-function-setup-keys' is enabled, 'C-x L' is now bound to
'find-library', 'C-x 4 L' is now bound to 'find-library-other-window'
and 'C-x 5 L' is now bound to 'find-library-other-frame'.

** New key binding after 'M-x' or 'M-X': 'M-X'.
Emacs allows different completion predicates to be used with 'M-x'
(i.e., 'execute-extended-command') via the
'read-extended-command-predicate' user option.  Emacs also has the
'M-X' (note upper case X) command, which only displays commands
especially relevant to the current buffer.  Emacs now allows toggling
between these modes while the user is inputting a command by hitting
'M-X' while in the minibuffer.

** Interactively, 'kill-buffer' will now offer to save the buffer if unsaved.

** New commands 'duplicate-line' and 'duplicate-dwim'.
'duplicate-line' duplicates the current line the specified number of times.
'duplicate-dwim' duplicates the region if it is active.  If not, it
works like 'duplicate-line'.  An active rectangular region is
duplicated on its right-hand side.  The new user option
'duplicate-line-final-position' specifies where to move point
after duplicating a line.

** Files with the ".eld" extension are now visited in 'lisp-data-mode'.

** 'network-lookup-address-info' can now check numeric IP address validity.
Specifying 'numeric' as the new optional HINTS argument makes it
check if the passed address is a valid IPv4/IPv6 address (without DNS
traffic).

    (network-lookup-address-info "127.1" 'ipv4 'numeric)
    => ([127 0 0 1 0])

** New command 'find-sibling-file'.
This command jumps to a file considered a "sibling file", which is
determined according to the new user option 'find-sibling-rules'.

** New user option 'delete-selection-temporary-region'.
When non-nil, 'delete-selection-mode' will only delete the temporary
regions (usually set by mouse-dragging or shift-selection).

** New user option 'switch-to-prev-buffer-skip-regexp'.
This should be a regexp or a list of regexps; buffers whose names
match those regexps will be ignored by 'switch-to-prev-buffer' and
'switch-to-next-buffer'.

** New command 'rename-visited-file'.
This command renames the file visited by the current buffer by moving
it to a new name or location, and also makes the buffer visit this new
file.

** Menus

*** The entries following the buffers in the "Buffers" menu can now be altered.
Change the 'menu-bar-buffers-menu-command-entries' variable to alter
the entries that follow the buffer list.

** 'delete-process' is now a command.
When called interactively, it will kill the process running in the
current buffer (if any).  This can be useful if you have runaway
output in the current buffer (from a process or a network connection),
and want to stop it.

** New command 'restart-emacs'.
This is like 'save-buffers-kill-emacs', but instead of just killing
the current Emacs process at the end, it starts a new Emacs process
(using the same command line arguments as the running Emacs process).
'kill-emacs' and 'save-buffers-kill-emacs' have also gained new
optional arguments to restart instead of just killing the current
process.

** Drag and Drop

*** New user option 'mouse-drag-mode-line-buffer'.
If non-nil, dragging on the buffer name part of the mode-line will
drag the buffer's associated file to other programs.  This option is
currently only available on X, Haiku and Nextstep (GNUstep or macOS).

*** New user option 'mouse-drag-and-drop-region-cross-program'.
If non-nil, this option allows dragging text in the region from Emacs
to another program.

*** New user option 'mouse-drag-and-drop-region-scroll-margin'.
If non-nil, this option allows scrolling a window while dragging text
around without a scroll wheel.

*** The value of 'mouse-drag-copy-region' can now be the symbol 'non-empty'.
This prevents mouse drag gestures from putting empty strings onto the
kill ring.

*** New user options 'dnd-indicate-insertion-point' and 'dnd-scroll-margin'.
These options allow adjusting point and scrolling a window when
dragging items from another program.

*** The X Direct Save (XDS) protocol is now supported.
This means dropping an image or file link from programs such as
Firefox will no longer create a temporary file in a random directory,
instead asking you where to save the file first.

** New user option 'record-all-keys'.
If non-nil, this option will force recording of all input keys,
including those typed in response to passwords prompt (this was the
previous behavior).  The default is nil, which inhibits recording of
passwords.

** New function 'command-query'.
This function makes its argument command prompt the user for
confirmation before executing.

** The 'disabled' property of a command's symbol can now be a list.
The first element of the list should be the symbol 'query', which will
cause the command disabled this way prompt the user with a y/n or a
yes/no question before executing.  The new function 'command-query' is
a convenient method of making commands disabled in this way.

** 'count-words' will now report buffer totals if given a prefix.
Without a prefix, it will only report the word count for the narrowed
part of the buffer.

** 'count-words' will now report sentence count when used interactively.

** New user option 'set-message-functions'.
It allows more flexible control of how echo-area messages are displayed
by adding functions to this list.  The default value is a list of one
element: 'set-minibuffer-message', which displays echo-area messages
at the end of the minibuffer text when the minibuffer is active.
Other useful functions include 'inhibit-message', which allows
specifying, via 'inhibit-message-regexps', the list of messages whose
display should be inhibited; and 'set-multi-message' that accumulates
recent messages and displays them stacked together.

** New user option 'find-library-include-other-files'.
If set to nil, commands like 'find-library' will only include library
files in the completion candidates.  The default is t, which preserves
previous behavior, whereby non-library files could also be included.

** New command 'sqlite-mode-open-file' for examining an sqlite3 file.
This uses the new 'sqlite-mode' which allows listing the tables in a
DB file, and examining and modifying the columns and the contents of
those tables.

** 'write-file' will now copy some file mode bits.
If the current buffer is visiting a file that is executable, the
'C-x C-w' command will now make the new file executable, too.

** New user option 'process-error-pause-time'.
This determines how long to pause Emacs after a process
filter/sentinel error has been handled.

** New faces for font-lock.
These faces are primarily meant for use with tree-sitter.  They are:
'font-lock-bracket-face', 'font-lock-delimiter-face',
'font-lock-escape-face', 'font-lock-function-call-face',
'font-lock-misc-punctuation-face', 'font-lock-number-face',
'font-lock-operator-face', 'font-lock-property-name-face',
'font-lock-property-use-face', 'font-lock-punctuation-face',
'font-lock-regexp-face', and 'font-lock-variable-use-face'.

** New face 'variable-pitch-text'.
This face is like 'variable-pitch' (from which it inherits), but is
slightly larger, which should help with the visual size differences
between the default, non-proportional font and proportional fonts when
mixed.

** New face 'mode-line-active'.
This inherits from the 'mode-line' face, but is the face actually used
on the mode lines (along with 'mode-line-inactive').

** New face attribute pseudo-value 'reset'.
This value stands for the value of the corresponding attribute of the
'default' face.  It can be used to reset attribute values produced by
inheriting from other faces.

** New X resource "borderThickness".
This controls the thickness of the external borders of the menu bars
and pop-up menus.

** New X resource "inputStyle".
This controls the style of the pre-edit and status areas of X input
methods.

** New X resources "highlightForeground" and "highlightBackground".
Only in the Lucid build, this controls colors used for highlighted
menu item widgets.

** On X, Emacs now tries to synchronize window resize with the window manager.
This leads to less flicker and empty areas of a frame being displayed
when a frame is being resized.  Unfortunately, it does not work on
some ancient buggy window managers, so if Emacs appears to freeze, but
is still responsive to input, you can turn it off by setting the X
resource "synchronizeResize" to "off".

** On X, Emacs can optionally synchronize display with the graphics hardware.
When this is enabled by setting the X resource "synchronizeResize" to
"extended", frame content "tearing" is drastically reduced.  This is
only supported on the Motif, Lucid, and no-toolkit builds, and
requires an X compositing manager supporting the extended frame
synchronization protocol (see
https://fishsoup.net/misc/wm-spec-synchronization.html).

This behavior can be toggled on and off via the frame parameter
'use-frame-synchronization'.

** New frame parameter 'alpha-background' and X resource "alphaBackground".
This controls the opacity of the text background when running on a
composited display.

** New frame parameter 'shaded'.
With window managers which support this, it controls whether or not a
frame's contents will be hidden, leaving only the title bar on display.

** New user option 'x-gtk-use-native-input'.
This controls whether or not GTK input methods are used by Emacs,
instead of XIM input methods.  Defaults to nil.

** New user option 'use-system-tooltips'.
This controls whether to use the toolkit tooltips, or Emacs's own
native implementation of tooltips as small frames.  This option is
only meaningful if Emacs was built with GTK+, Nextstep, or Haiku
support, and defaults to t, which makes Emacs use the toolkit
tooltips.  The existing GTK-specific option
'x-gtk-use-system-tooltips' is now an alias of this new option.

** Non-native tooltips are now supported on Nextstep.
This means Emacs built with GNUstep or built on macOS is now able to
display different faces and images inside tooltips when the
'use-system-tooltips' user option is nil.

** New minor mode 'pixel-scroll-precision-mode'.
When enabled, and if your mouse supports it, you can scroll the
display up or down at pixel resolution, according to what your mouse
wheel reports.  Unlike 'pixel-scroll-mode', this mode scrolls the
display pixel-by-pixel, as opposed to only animating line-by-line
scrolls.

** Terminal Emacs

*** Emacs will now use 24-bit colors on terminals that support "Tc" capability.
This is in addition to previously-supported ways of discovering 24-bit
color support: either via the "RGB" or "setf24" capabilities, or if
the 'COLORTERM' environment variable is set to the value "truecolor".

*** Select active regions with xterm selection support.
On terminals with xterm "setSelection" support, the active region may be
saved to the X primary selection, following the
'select-active-regions' variable.  This support is enabled when
'tty-select-active-regions' is non-nil.

*** New command to set up display of unsupported characters.
The new command 'standard-display-by-replacement-char' produces Lisp
code that sets up the 'standard-display-table' to use a replacement
character for display of characters that the text-mode terminal
doesn't support.  This code is intended to be used in your init files.
This feature is most useful with the Linux console and similar
terminals, where Emacs has a reliable way of determining which
characters have glyphs in the font loaded into the terminal's memory.

*** New functions to set terminal output buffer size.
The new functions 'tty--set-output-buffer-size' and
'tty--output-buffer-size' allow setting and retrieving the output
buffer size of a terminal device.  The default buffer size is and has
always been BUFSIZ, which is defined in your system's stdio.h.  When
you set a buffer size with 'tty--set-output-buffer-size', this also
prevents Emacs from explicitly flushing the tty output stream, except
at the end of display update.

** ERT

*** New ERT variables 'ert-batch-print-length' and 'ert-batch-print-level'.
These variables will override 'print-length' and 'print-level' when
printing Lisp values in ERT batch test results.

*** Redefining an ERT test in batch mode now signals an error.
Executing 'ert-deftest' with the same name as an existing test causes
the previous definition to be discarded, which was probably not
intended when this occurs in batch mode.  To remedy the error, rename
tests so that they all have unique names.

*** ERT can generate JUnit test reports.
When environment variable 'EMACS_TEST_JUNIT_REPORT' is set, ERT
generates a JUnit test report under this file name.  This is useful
for Emacs integration into CI/CD test environments.

*** Unbound test symbols now signal an 'ert-test-unbound' error.
This affects the 'ert-select-tests' function and its callers.

** Emoji

*** Emacs now has several new methods for inserting Emoji.
The Emoji commands are under the new 'C-x 8 e' prefix.

*** New command 'emoji-insert' (bound to 'C-x 8 e e' and 'C-x 8 e i').
This command guides you through various Emoji categories and
combinations in a graphical menu system.

*** New command 'emoji-search' (bound to 'C-x 8 e s').
This command lets you search for and insert an Emoji based on names.

*** New command 'emoji-list' (bound to 'C-x 8 e l').
This command lists all Emoji (categorized by themes) in a special
buffer and lets you choose one of them to insert.

*** New command 'emoji-recent' (bound to 'C-x 8 e r').
This command lets you choose among the Emoji you have recently
inserted and insert it.

*** New command 'emoji-describe' (bound to 'C-x 8 e d').
This command will tell you the name of the Emoji at point.  (It also
works for non-Emoji characters.)

*** New commands 'emoji-zoom-increase' and 'emoji-zoom-decrease'.
These are bound to 'C-x 8 e +' and 'C-x 8 e -', respectively.  They
can be used on any character, but are mainly useful for Emoji.

*** New command 'emoji-zoom-reset'.
This is bound to 'C-x 8 e 0', and undoes any size changes performed by
'emoji-zoom-increase' and 'emoji-zoom-decrease'.

*** New input method 'emoji'.
This allows you to enter Emoji using short strings, eg ':face_palm:'
or ':scream:'.
* Changes in Emacs 30.1

** Help

*** 'describe-function' shows function inferred type when available.
For native compiled Lisp functions 'describe-function' prints (after
the signature) the automatically inferred function type as well.

---
** New user option 'describe-bindings-outline-rules'.
This user option controls outline visibility in the output buffer of
'describe-bindings' when 'describe-bindings-outline' in non-nil.

** X selection requests are now handled much faster and asynchronously.
This means it should be less necessary to disable the likes of
'select-active-regions' when Emacs is running over a slow network
connection.

** Emacs now updates invisible frames that are made visible by a compositor.
If an invisible or an iconified frame is shown to the user by the
compositing manager, Emacs will now redisplay such a frame even though
'frame-visible-p' returns nil or 'icon' for it.  This can happen, for
example, as part of preview for iconified frames.

---
** New user option 'menu-bar-close-window'.
When non-nil, selecting Close from the File menu or clicking Close in
the tool bar will result in the current window being closed, if
possible.

+++
** 'write-region-inhibit-fsync' now defaults to t in interactive mode,
as it has in batch mode since Emacs 24.

+++
** New user option 'remote-file-name-inhibit-delete-by-moving-to-trash'.
When non-nil, this option suppresses moving remote files to the local
trash when deleting.  Default is nil.

---
** New user option 'remote-file-name-inhibit-auto-save'.
If this user option is non-nil, 'auto-save-mode' will not auto-save
remote buffers.  The default is nil.

+++
** New user option 'remote-file-name-access-timeout'.
When a positive number, this option limits the call of 'access-file'
for remote files to this number of seconds.  Default is nil.

+++
** New user option 'yes-or-no-prompt'.
This allows the user to customize the prompt that is appended by
'yes-or-no-p' when asking questions.  The default value is
"(yes or no) ".

---
** New face 'display-time-date-and-time'.
This is used for displaying the time and date components of
'display-time-mode'.

---
** New icon images for general use.
Several symbolic icons are added to "etc/images/symbols", including
plus, minus, check-mark, start, etc.

+++
** Tool bars can now be placed on the bottom on more systems.
The 'tool-bar-position' frame parameter can be set to 'bottom' on all
window systems other than Nextstep.

+++
** New global minor mode 'modifier-bar-mode'.
When this minor mode is enabled, buttons representing modifier keys
are displayed along the tool bar.

---
** New user option 'uniquify-dirname-transform'.
This can be used to customize how buffer names are uniquified, by
making arbitrary transforms on the buffer's directory name (whose
components are used to uniquify buffer names when they clash).  You
can use this to distinguish between buffers visiting files with the
same base name that belong to different projects by using the provided
transform function 'project-uniquify-dirname-transform'.

** cl-print

*** You can expand the "..." truncation everywhere.
The code that allowed "..." to be expanded in the "*Backtrace*" buffer
should now work anywhere the data is generated by 'cl-print'.

*** hash-tables' contents can be expanded via the ellipsis.

** Modeline elements can now be right-aligned.
Anything following the symbol 'mode-line-format-right-align' in
'mode-line-format' will be right-aligned.  Exactly where it is
right-aligned to is controlled by the new user option
'mode-line-right-align-edge'.


* Editing Changes in Emacs 30.1

+++
** Emacs now has better support for touchscreen devices.
Many touch screen gestures are now implemented and translated into
mouse or gesture events, and support for tapping tool bar buttons and
opening menus has been written.  Countless packages, such as Dired and
Custom have been adjusted to better understand touch screen input.

---
** On X, Emacs now supports input methods which perform "string conversion".
This means an input method can now ask Emacs to delete text
surrounding point and replace it with something else, as well as query
Emacs for surrounding text.  If your input method allows you to "undo"
mistaken compositions, this will now work as well.

---
** New command 'kill-matching-buffers-no-ask'.
This works like 'kill-matching-buffers', but without asking for
confirmation.

---
** New user option 'duplicate-region-final-position'.
It controls the placement of point and the region after duplicating a
region with 'duplicate-dwim'.

+++
** New user option 'mouse-prefer-closest-glyph'.
When enabled, clicking or dragging with the mouse will put the point
or start the drag in front of the buffer position corresponding to the
glyph with the closest X coordinate to the click or start of the drag.
In other words, if the mouse pointer is in the right half of a glyph,
point will be put after the buffer position corresponding to that glyph,
whereas if the mouse pointer is in the left half of a glyph, point
will be put in front the buffer position corresponding to that glyph.
By default this is disabled.

** Internationalization

---
*** Users in CJK locales can control width of some non-CJK characters.
Some characters are considered by Unicode as "ambiguous" with respect
to their display width: either "full-width" (i.e. taking 2 columns on
display) or "narrow" (taking 1 column).  The actual width depends on
the fonts used for these characters by Emacs or (for text-mode frames)
by the terminal emulator.  Traditionally, font sets in CJK locales
were set up so as to display these characters as full-width, and thus
Emacs modified the char-width table in those locales to follow suit.
Lately, the tendency is to display these characters as narrow.  The
new user option 'cjk-ambiguous-chars-are-wide' allows users to control
whether Emacs considers these characters as full-width (the default)
or narrow (if the variable is customized to the nil value).

This setting affects the results of 'string-width' and similar
functions in CJK locales.


* Changes in Specialized Modes and Packages in Emacs 30.1

---
** Variable order and truncation can now be configured in 'gdb-many-windows'.
The new user option 'gdb-locals-table-row-config' allows users to
configure the order and max length of various properties in the local
variables buffer when using 'gdb-many-windows'.

By default, this user option is set to write the properties in the order:
name, type and value, where the name and type are truncated to 20
characters, and the value is truncated according to the value of
'gdb-locals-value-limit'.

If you want to get back the old behavior, set the user option to the value

    (setopt gdb-locals-table-row-config
            `((type . 0) (name . 0) (value . ,gdb-locals-value-limit)))

** Grep

*** New user option 'grep-use-headings'.
When non-nil, the output of Grep is split into sections, one for each
file, instead of having file names prefixed to each line.  It is
equivalent to the "--heading" option of some tools such as 'git grep'
and 'rg'.  The headings are displayed using the new 'grep-heading'
face.

** VC

---
*** New user option 'vc-git-shortlog-switches'.
This is a string or a list of strings that specifies the Git log
switches for shortlogs, such as the one produced by 'C-x v L'.
'vc-git-log-switches' is no longer used for shortlogs.

** Diff Mode

+++
*** 'diff-ignore-whitespace-hunk' can now be applied to all hunks.
When called with a non-nil prefix argument,
'diff-ignore-whitespace-hunk' now iterates over all the hunks in the
current diff, regenerating them without whitespace changes.

+++
*** New user option 'diff-ignore-whitespace-switches'.
This allows changing which type of whitespace changes are ignored when
regenerating hunks with 'diff-ignore-whitespace-hunk'.  Defaults to
the previously hard-coded "-b".

** Ediff

---
*** New user option 'ediff-floating-control-frame'.
If non-nil, try making the control frame be floating rather than tiled.

Many X tiling window managers make the Ediff control frame a tiled
window equal in size to the main Emacs frame, which works poorly.
This option is useful to set if you use such a window manager.

** Buffer Selection

---
*** New user option 'bs-default-action-list'.
You can now configure how to display the "*buffer-selection*" buffer
using this new option.  (Or set 'display-buffer-alist' directly.)

** Eshell

+++
*** New splice operator for Eshell dollar expansions.
Dollar expansions in Eshell now let you splice the elements of the
expansion in-place using '$@expr'.  This makes it easier to fill lists
of arguments into a command, such as when defining aliases.  For more
information, see the "(eshell) Dollars Expansion" node in the Eshell
manual.

+++
*** Eshell now supports negative numbers and ranges for indices.
Now, you can retrieve the last element of a list with '$my-list[-1]'
or get a sublist of elements 2 through 4 with '$my-list[2..5]'.  For
more information, see the "(eshell) Dollars Expansion" node in the
Eshell manual.

+++
*** Eshell commands can now be explicitly-remote (or local).
By prefixing a command name in Eshell with a remote identifier, like
"/ssh:user@remote:whoami", you can now run commands on a particular
host no matter your current directory.  Likewise, you can run a
command on your local system no matter your current directory via
"/:whoami".  For more information, see the "(eshell) Remote Access"
node in the Eshell manual.

+++
*** Eshell's '$UID' and '$GID' variables are now connection-aware.
Now, when expanding '$UID' or '$GID' in a remote directory, the value
is the user or group ID associated with the remote connection.

---
*** Eshell now uses 'field' properties in its output.
In particular, this means that pressing the '<home>' key moves the
point to the beginning of your input, not the beginning of the whole
line.  If you want to go back to the old behavior, add something like
this to your configuration:

    (keymap-set eshell-mode-map "<home>" #'eshell-bol-ignoring-prompt)

---
*** You can now properly unload Eshell.
Calling '(unload-feature 'eshell)' no longer signals an error, and now
correctly unloads Eshell and all of its modules.

+++
*** 'eshell-read-aliases-list' is now an interactive command.
After manually editing 'eshell-aliases-file', you can use this command
to load the edited aliases.

+++
*** 'rgrep' is now a builtin command.
Running 'rgrep' in Eshell now uses the Emacs grep facility instead of
calling external rgrep.

** Shell Mode

+++
*** New user option 'shell-get-old-input-include-continuation-lines'.
When this user option is non-nil, 'shell-get-old-input' ('C-RET')
includes multiple shell "\" continuation lines from command output.
Default is nil.

** Prog Mode

+++
*** New command 'prog-fill-reindent-defun'.
This command either fills a single paragraph in a defun, such as a
docstring, or a comment, or (re)indents the surrounding defun if
point is not in a comment or a string.  It is by default bound to
'M-q' in 'prog-mode' and all its descendants.

** Which Function Mode

+++
*** Which Function Mode can now display function names on the header line.
The new user option 'which-func-display' allows choosing where the
function name is displayed.  The default is 'mode' to display in the
mode line.  'header' will display in the header line;
'mode-and-header' displays in both the header line and mode line.

** Tramp

+++
*** New connection methods "toolbox" and "flatpak".
They allow accessing system containers provided by Toolbox or
sandboxes provided by Flatpak.

+++
*** Connection method "kubernetes" supports now optional container name.
The host name for Kubernetes connections can be of kind [CONTAINER.]POD,
in order to specify a dedicated container.  If there is just the pod
name, the first container in the pod is taken.  The new user options
'tramp-kubernetes-context' and 'tramp-kubernetes-namespace' allow to
access pods with different context or namespace but the default one.

+++
*** Rename 'tramp-use-ssh-controlmaster-options' to 'tramp-use-connection-share'.
The old name still exists as obsolete variable alias.  This user
option controls now connection sharing for both ssh-based and
plink-based methods.  It allows the values t, nil, and 'suppress'.
The latter suppresses also "ControlMaster" settings in the user's
"~/.ssh/config" file, or connection share configuration in PuTTY
sessions, respectively.

+++
*** New command 'tramp-cleanup-some-buffers'.
It allows to kill only selected remote buffers, controlled by user
option 'tramp-cleanup-some-buffers-hook'.

+++
*** New command 'inhibit-remote-files'.
This command disables the handling of file names with the special
remote file name syntax.  It should be applied only when remote files
won't be used in this Emacs instance.  It provides a slightly improved
performance of file name handling in Emacs.

+++
*** New macro 'without-remote-files'.
This macro could wrap code which handles local files only.  Due to the
temporary deactivation of remote files, it results in a slightly
improved performance of file name handling in Emacs.

** EWW

+++
*** 'eww-open-file' can now display the file in a new buffer.
By default, the command reuses the "*eww*" buffer, but if called with
the new argument NEW-BUFFER non-nil, it will use a new buffer instead.
Interactively, invoke 'eww-open-file' with a prefix argument to
activate this behavior.

---
*** 'eww' URL or keyword prompt now has tab completion.
The interactive minibuffer prompt when invoking 'eww' now has support
for tab completion.

+++
*** 'eww' URL and keyword prompt now completes suggested URIs and bookmarks.
The interactive minibuffer prompt when invoking 'eww' now provides
completions from 'eww-suggest-uris'.  'eww-suggest-uris' now includes
bookmark URIs.

+++
*** New command 'eww-copy-alternate-url'.
It copies an alternate link on the page currently visited in EWW into
the kill ring.  Alternate links are optional metadata that HTML pages
use for linking to their alternative representations, such as
translated versions or associated RSS feeds.

** go-ts-mode

+++
*** New command 'go-ts-mode-docstring'.
This command adds a docstring comment to the current defun.  If a
comment already exists, point is only moved to the comment.  It is
bound to 'C-c C-d' in 'go-ts-mode'.

** Man-mode

+++
*** New user option 'Man-prefer-synchronous-call'.
When this is non-nil, call the 'man' program synchronously rather than
asynchronously (which is the default behavior).

** DocView

---
*** New face 'doc-view-svg-face'.
This replaces 'doc-view-svg-foreground' and 'doc-view-svg-background'.
If you don't like the colors produced by the default definition of
this new face when DocView displays documents, customize this face to
restore the colors you were used to, or to get colors more to your
liking.

---
*** DocView buffers now display a new tool bar.
This tool bar contains options for searching and navigating within the
document, replacing the incompatible items for incremental search and
editing within the default tool bar displayed in the past.

** Shortdoc

+++
*** New function 'shortdoc-function-examples'.
This function returns examples of use of a given Emacs Lisp function
from the available shortdoc information.

+++
*** New function 'shortdoc-help-fns-examples-function'.
This function inserts into the current buffer examples of use of a
given Emacs Lisp function, which it gleans from the shortdoc
information.  If you want 'describe-function' ('C-h f') to insert
examples of using the function into regular "*Help*" buffers, add the
following to your init file:

    (add-hook 'help-fns-describe-function-functions
              #'shortdoc-help-fns-examples-function)

** Package

---
*** New user option 'package-vc-register-as-project'.
When non-nil, it will automatically register every package as a
project, that you can quickly select using 'project-switch-project'
('C-x p p').

---
*** New user option 'package-vc-allow-side-effects'.
When non-nil, package specifications with side-effects for building
software will be used when building a package.

** Flymake

+++
*** New user option 'flymake-show-diagnostics-at-end-of-line'.
When non-nil, Flymake shows summarized descriptions of diagnostics at
the end of the line.  Depending on your preference, this can either be
distracting and easily confused with actual code, or a significant
early aid that relieves you from moving the buffer or reaching for the
mouse to consult an error message.

** Python Mode

---
*** New user option 'python-indent-block-paren-deeper'.
If non-nil, increase the indentation of the lines inside parens in a
header of a block when they are indented to the same level as the body
of the block:

    if (some_expression
            and another_expression):
        do_something()

instead of:

    if (some_expression
        and another_expression):
        do_something()

*** New user option 'python-interpreter-args'.
This allows the user to specify command line arguments to the non
interactive Python interpreter specified by 'python-interpreter'.

** use-package

+++
*** New ':vc' keyword.
This keyword enables the user to install packages using 'package-vc'.

** Rmail

---
*** New commands for reading mailing lists.
The new Rmail commands 'rmail-mailing-list-post',
'rmail-mailing-list-unsubscribe', 'rmail-mailing-list-help', and
'rmail-mailing-list-archive' allow to, respectively, post to,
unsubscribe from, request help about, and browse the archives, of the
mailing list from which the current email message was delivered.

** Dictionary

---
*** New user option 'dictionary-search-interface'.
Controls how the 'dictionary-search' command prompts for and displays
dictionary definitions.  Customize this user option to 'help' to have
'dictionary-search' display definitions in a "*Help*" buffer and
provide dictionary-based minibuffer completion for word selection.

---
*** New user option 'dictionary-read-word-prompt'.
This allows the user to customize the prompt that is used by
'dictionary-search' when asking for a word to search in the
dictionary.

---
*** New user option 'dictionary-display-definition-function'.
This allows the user to customize the way in which 'dictionary-search'
displays word definitions.  If non-nil, this user option should be set
to a function that displays a word definition obtained from a
dictionary server.  The new function
'dictionary-display-definition-in-help-buffer' can be used to display
the definition in a "*Help*" buffer, instead of the default
"*Dictionary*" buffer.

---
*** New user option 'dictionary-read-word-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a word to search in the dictionary.  This user option
should be set to a function that lets the user select a word and
returns it as a string.  The new function
'dictionary-completing-read-word' can be used to prompt with
completion based on dictionary matches.

---
*** New user option 'dictionary-read-dictionary-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a dictionary to search in.  This user option should be set
to a function that lets the user select a dictionary and returns its
name as a string.  The new function
'dictionary-completing-read-dictionary' can be used to prompt with
completion based on dictionaries that the server supports.

** Pp

*** New 'pp-default-function' user option replaces 'pp-use-max-width'.

*** New default pretty printing function, which tries to obey 'fill-column'.

*** 'pp-to-string' takes an additional PP-FUNCTION argument.
This argument specifies the prettifying algorithm to use.

** Emacs Lisp mode

---
*** ',@' now has 'prefix' syntax.
Previously, the '@' character, which normally has 'symbol' syntax,
would combine with a following Lisp symbol and interfere with symbol
searching.

** CPerl mode

---
*** Subroutine signatures are now supported.
CPerl mode fontifies subroutine signatures like variable declarations
which makes them visually distinct from subroutine prototypes.

*** Syntax of Perl up to version 5.38 is supported.
CPerl mode supports the new keywords for exception handling and the
object oriented syntax which were added in Perl 5.36 and 5.38.

** Emacs Sessions (Desktop)

+++
*** Restoring buffers visiting remote files can now time out.
When a buffer is restored which visits a remote file, the restoration
of the session could hang if the remote host is off-line or slow to
respond.  Setting the user option 'remote-file-name-access-timeout' to
a positive number will abandon the attempt to restore such buffers
after a timeout of that many seconds, thus allowing the rest of
desktop restoration to continue.

** Recentf

+++
*** Checking recent remote files can now time out.
Similarly to buffer restoration by Desktop, 'recentf-mode' checking
of the accessibility of remote files can now time out if
'remote-file-name-access-timeout' is set to a positive number.

** Notifications

+++
*** Allow to use Icon Naming Specification for app-icon
You can use a symbol as the value for ':app-icon' to provide icon name
without specifying a file, like this:

  (notifications-notify
    :title "I am playing music" :app-icon 'multimedia-player)

** Image Dired

*** New user option 'image-dired-thumb-naming'.
You can now configure how a thumbnail is named using this option.


* New Modes and Packages in Emacs 30.1

** New major modes based on the tree-sitter library

+++
*** New major mode 'html-ts-mode'.
An optional major mode based on the tree-sitter library for editing
HTML files.

---
*** New major mode 'heex-ts-mode'.
A major mode based on the tree-sitter library for editing HEEx files.

---
*** New major mode 'elixir-ts-mode'.
A major mode based on the tree-sitter library for editing Elixir
files.

---
** The highly accessible Modus themes collection has eight items.
The 'modus-operandi' and 'modus-vivendi' are the main themes that have
been part of Emacs since version 28.  The former is light, the latter
dark.  In addition to these, we now have 'modus-operandi-tinted' and
'modus-vivendi-tinted' for easier legibility, as well as
'modus-operandi-deuteranopia', 'modus-vivendi-deuteranopia',
'modus-operandi-tritanopia', and 'modus-vivendi-tritanopia' to cover
the needs of users with red-green or blue-yellow color deficiency.
The Info manual "(modus-themes) Top" describes the details and
showcases all their customization options.


* Incompatible Lisp Changes in Emacs 30.1

---
** The escape sequence '\x' not followed by hex digits is now an error.
Previously, '\x' without at least one hex digit denoted character code
zero (NUL) but as this was neither intended nor documented or even
known by anyone, it is now treated as an error by the Lisp reader.

---
** Connection-local variables are applied in buffers visiting a remote file.
This overrides possible directory-local or file-local variables with
the same name.

---
** User option 'tramp-completion-reread-directory-timeout' has been removed.
This user option has been obsoleted in Emacs 27, use
'remote-file-name-inhibit-cache' instead.

---
** User options 'eshell-NAME-unload-hook' are now obsolete.
These hooks were named incorrectly, and so they never actually ran
when unloading the correspending feature.  Instead, you should use
hooks named after the feature name, like 'esh-mode-unload-hook'.

+++
** 'copy-tree' now copies records when its optional 2nd argument is non-nil.

+++
** Regexp zero-width assertions followed by operators are better defined.
Previously, regexps such as "xy\\B*" would have ill-defined behavior.
Now any operator following a zero-width assertion applies to that
assertion only (which is useless).  For historical compatibility, an
operator character following '^' or '\`' becomes literal, but we
advise against relying on this.

---
** Mode-line mnemonics for some coding-systems have changed.
The mode-line mnemonic for 'utf-7' is now the lowercase 'u', to be
consistent with the other encodings of this family.

The mode-line mnemonic for 'koi8-u' is now 'У', U+0423 CYRILLIC
CAPITAL LETTER U, to distinguish between this encoding and the
UTF-8/UTF-16 family.

If your terminal cannot display 'У', or if you want to get the old
behavior back for any other reason, you can do that using the
'coding-system-put' function.  For example, the following restores the
previous behavior of showing 'U' in the mode line for 'koi8-u':

    (coding-system-put 'koi8-u :mnemonic ?U)

---
** 'vietnamese-tcvn' is now a coding system alias for 'vietnamese-vscii'.
VSCII-1 and TCVN-5712 are different names for the same character
encoding.  Therefore, the duplicate coding system definition has been
dropped in favor of an alias.

The mode-line mnemonic for 'vietnamese-vscii' and its aliases is the
lowercase letter 'v'.

+++
** Infinities and NaNs no longer act as symbols on non-IEEE platforms.
On old platforms like the VAX that do not support IEEE floating-point,
tokens like 0.0e+NaN and 1.0e+INF are no longer read as symbols.
Instead, the Lisp reader approximates an infinity with the nearest
finite value, and a NaN with some other non-numeric object that
provokes an error if used numerically.

+++
** X color support compatibility aliases are now marked obsolete.
The compatibility aliases 'x-defined-colors', 'x-color-defined-p',
'x-color-values', and 'x-display-color-p' are now obsolete.


* Lisp Changes in Emacs 30.1

** 'defadvice' is marked as obsolete.
See (info "(elisp)Porting Old Advice") for help converting them
to use `advice-add` or `define-advice instead.

+++
** New variable 'current-key-remap-sequence'.
It is bound to the key sequence that caused a call to a function bound
within `function-key-map' or `input-decode-map' around those calls.

+++
** New variables describing the names of built in programs.
The new variables 'ctags-program-name', 'ebrowse-program-name',
'etags-program-name', 'hexl-program-name', 'emacsclient-program-name'
and 'movemail-program-name' should be used instead of "ctags",
"ebrowse", "etags", "hexl", and "emacsclient", when starting one of
these built in programs in a subprocess.

+++
** 'x-popup-menu' now understands touch screen events.
When a 'touchscreen-begin' or 'touchscreen-end' event is passed as the
POSITION argument, it will behave as if that event was a mouse event.

+++
** New functions for handling touch screen events.
The new functions 'touch-screen-track-tap' and
'touch-screen-track-drag' handle tracking common touch screen gestures
from within a command.

** New user option 'safe-local-variable-directories'.
This user option names directories in which Emacs will treat all
directory-local variables as safe.

+++
** New parameter to 'touchscreen-end' events.
CANCEL non-nil establishes that the touch sequence has been
intercepted by programs such as window managers and should be ignored
with Emacs.

** New variable 'inhibit-auto-fill' to temporarily prevent auto-fill.

+++
** New variable 'secondary-tool-bar-map'.
If non-nil, this variable contains a keymap of menu items that are
displayed along tool bar items inside 'tool-bar-map'.

** Functions and variables to transpose sexps

+++
*** New helper variable 'transpose-sexps-function'.
Emacs now can set this variable to customize the behavior of the
'transpose-sexps' function.

+++
*** New function 'transpose-sexps-default-function'.
The previous implementation is moved into its own function, to be
bound by 'transpose-sexps-function'.

*** New function 'treesit-transpose-sexps'.
Tree-sitter now unconditionally sets 'transpose-sexps-function' for all
tree-sitter enabled modes.  This functionality utilizes the new
'transpose-sexps-function'.

** Functions and variables to move by program statements

*** New variable 'forward-sentence-function'.
Major modes can now set this variable to customize the behavior of the
'forward-sentence' command.

*** New function 'forward-sentence-default-function'.
The previous implementation of 'forward-sentence' is moved into its
own function, to be bound by 'forward-sentence-function'.

*** New buffer-local variable 'treesit-sentence-type-regexp'.
Similarly to 'treesit-defun-type-regexp', this variable is used to
define "sentences" in tree-sitter enabled modes.

*** New function 'treesit-forward-sentence'.
All tree-sitter enabled modes that define 'treesit-sentence-type-regexp'
now set 'forward-sentence-function' to call 'treesit-forward-sentence'.

** Functions and variables to move by program sexps

*** New buffer-local variable 'treesit-sexp-type-regexp'.
Similarly to 'treesit-defun-type-regexp', this variable is used to
define "sexps" in tree-sitter enabled modes.

*** New function 'treesit-forward-sexp'.
Tree-sitter conditionally sets 'forward-sexp-function' for major modes
that have defined 'treesit-sexp-type-regexp' to enable sexp-related
motion commands.

** New or changed byte-compilation warnings

---
*** Warn about empty bodies for more special forms and macros.
The compiler now warns about an empty body argument to 'when',
'unless', 'ignore-error' and 'with-suppressed-warnings' in addition to
the existing warnings for 'let' and 'let*'.  Example:

    (when (> x 2))

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'empty-body'.

---
*** Warn about quoted error names in 'condition-case' and 'ignore-error'.
The compiler now warns about quoted condition (error) names
in 'condition-case' and 'ignore-error'.  Example:

    (condition-case nil
        (/ x y)
      ('arith-error "division by zero"))

Quoting them adds the error name 'quote' to those handled or ignored
respectively, which was probably not intended.

---
*** Warn about comparison with literal constants without defined identity.
The compiler now warns about comparisons by identity with a literal
string, cons, vector, record, function, large integer or float as this
may not match any value at all.  Example:

    (eq x "hello")

Only literals for symbols and small integers (fixnums), including
characters, are guaranteed to have a consistent (unique) identity.
This warning applies to 'eq', 'eql', 'memq', 'memql', 'assq', 'rassq',
'remq' and 'delq'.

To compare by (structural) value, use 'equal', 'member', 'assoc',
'rassoc', 'remove' or 'delete' instead.  Floats and bignums can also
be compared using 'eql', '=' and 'memql'.  Function literals cannot be
compared reliably at all.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about 'condition-case' without handlers.
The compiler now warns when the 'condition-case' form is used without
any actual handlers, as in

    (condition-case nil (read buffer))

because it has no effect other than the execution of the body form.
In particular, no errors are caught or suppressed.  If the intention
was to catch all errors, add an explicit handler for 'error', or use
'ignore-error' or 'ignore-errors'.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about 'unwind-protect' without unwind forms.
The compiler now warns when the 'unwind-protect' form is used without
any unwind forms, as in

    (unwind-protect (read buffer))

because the behavior is identical to that of the argument; there is
no protection of any kind.  Perhaps the intended unwind forms have
been misplaced or forgotten, or the use of 'unwind-protect' could be
simplified away.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about mutation of constant values.
The compiler now warns about code that modifies program constants in
some obvious cases.  Examples:

    (setcar '(1 2) 7)
    (aset [3 4] 0 8)
    (aset "abc" 1 ?d)

Such code may have unpredictable behavior because the constants are
part of the program, not data structures generated afresh during
execution, and the compiler does not expect them to change.

To avoid the warning, operate on an object created by the program
(maybe a copy of the constant), or use a non-destructive operation
instead.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'mutate-constant'.

---
*** Warn about more ignored function return values.
The compiler now warns when the return value from certain functions is
implicitly ignored.  Example:

    (progn (nreverse my-list) my-list)

will elicit a warning because it is usually pointless to call
'nreverse' on a list without using the returned value.

To silence the warning, make use of the value in some way, such as
assigning it to a variable.  You can also wrap the function call in
'(ignore ...)', or use 'with-suppressed-warnings' with the warning
name 'ignored-return-value'.

The warning will only be issued for calls to functions declared
'important-return-value' or 'side-effect-free' (but not 'error-free').

+++
** New function declaration and property 'important-return-value'.
The declaration '(important-return-value t)' sets the
'important-return-value' property which indicates that the function
return value should probably not be thrown away implicitly.

+++
** New functions 'file-user-uid' and 'file-group-gid'.
These functions are like 'user-uid' and 'group-gid', respectively, but
are aware of file name handlers, so they will return the remote UID or
GID for remote files (or -1 if the connection has no associated user).

+++
** 'fset', 'defalias' and 'defvaralias' now signal an error for cyclic aliases.
Previously, 'fset', 'defalias' and 'defvaralias' could be made to
build circular function and variable indirection chains as in

    (defalias 'able 'baker)
    (defalias 'baker 'able)

but trying to use them would sometimes make Emacs hang.  Now, an attempt
to create such a loop results in an error.

Since circular alias chains now cannot occur, 'function-alias-p',
'indirect-function' and 'indirect-variable' will never signal an error.
Their 'noerror' arguments have no effect and are therefore obsolete.


* Changes in Emacs 30.1 on Non-Free Operating Systems


----------------------------------------------------------------------
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


Local variables:
coding: utf-8
mode: outline
mode: emacs-news
paragraph-separate: "[	 ]"
end:
